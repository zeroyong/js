/**
 * @Author: xhg
 * @Date:   2025-06-17 20:49:16
 * @Last Modified by:   xhg
 * @Last Modified time: 2025-06-26 19:36:04
 */
// ==UserScript==
// @name        üìö‰π¶ÂçïÊ∑ªÂä†Â∞èÂ∑•ÂÖ∑
// @namespace   Violentmonkey Scripts
// @match       https://tuishujun.com/books/*
// @match       https://www.ypshuo.com/novel/*
// @grant       GM_setValue
// @grant       GM_getValue
// @grant       GM_deleteValue
// @version     1.2
// @author      xhg
// @description Ë∑®Âüü‰π¶ÂçïÁÆ°ÁêÜÂ∑•ÂÖ∑
// ==/UserScript==

(function() {
    'use strict';

    // ÂΩìÂâçÈÄâ‰∏≠ÁöÑ‰π¶ÂçïÂêçÁß∞
    let currentBookListName = 'ÊàëÁöÑ‰π¶Âçï';

    // Áªü‰∏ÄÁöÑÂ≠òÂÇ®ÈîÆÂêç
    const BOOK_LIST_STORAGE_KEY = 'cross_site_book_lists_v2';
    const SITE_CONFIG_CACHE_KEY = 'site_config_cache_v1';

    // ÂàõÂª∫‰ºòÁæéÁöÑÊ∂àÊÅØÊèêÁ§∫Á≥ªÁªü
    function createNotification(message, type = 'info', duration = 3000) {
        // ÁßªÈô§Áé∞ÊúâÁöÑÈÄöÁü•
        const existingNotifications = document.querySelectorAll('.custom-notification');
        existingNotifications.forEach(notification => notification.remove());

        const notification = document.createElement('div');
        notification.className = 'custom-notification';
        
        // Ê†πÊçÆÁ±ªÂûãËÆæÁΩÆÊ†∑Âºè
        const typeStyles = {
            success: {
                background: 'linear-gradient(135deg, #28a745, #20c997)',
                icon: '‚úÖ',
                borderColor: '#28a745'
            },
            error: {
                background: 'linear-gradient(135deg, #dc3545, #e74c3c)',
                icon: '‚ùå',
                borderColor: '#dc3545'
            },
            warning: {
                background: 'linear-gradient(135deg, #ffc107, #fd7e14)',
                icon: '‚ö†Ô∏è',
                borderColor: '#ffc107'
            },
            info: {
                background: 'linear-gradient(135deg, #007bff, #6f42c1)',
                icon: '‚ÑπÔ∏è',
                borderColor: '#007bff'
            }
        };

        const style = typeStyles[type] || typeStyles.info;

        notification.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: ${style.background};
            color: white;
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            z-index: 10003;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            font-size: 14px;
            font-weight: 500;
            border: 2px solid ${style.borderColor};
            backdrop-filter: blur(10px);
            animation: slideInDown 0.3s ease-out;
            max-width: 400px;
            text-align: center;
            line-height: 1.4;
        `;

        notification.innerHTML = `
            <div style="display: flex; align-items: center; justify-content: center; gap: 10px;">
                <span style="font-size: 18px;">${style.icon}</span>
                <span>${message}</span>
            </div>
        `;

        // Ê∑ªÂä†Âä®ÁîªÊ†∑Âºè
        const styleSheet = document.createElement('style');
        styleSheet.textContent = `
            @keyframes slideInDown {
                from {
                    transform: translateX(-50%) translateY(-100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(-50%) translateY(0);
                    opacity: 1;
                }
            }
            @keyframes slideOutUp {
                from {
                    transform: translateX(-50%) translateY(0);
                    opacity: 1;
                }
                to {
                    transform: translateX(-50%) translateY(-100%);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(styleSheet);

        document.body.appendChild(notification);

        // Ëá™Âä®ÁßªÈô§
        setTimeout(() => {
            notification.style.animation = 'slideOutUp 0.3s ease-in';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }, duration);

        return notification;
    }

    // Ëé∑ÂèñÊâÄÊúâ‰π¶ÂçïÊï∞ÊçÆÔºà‰ΩøÁî® GM_setValue/GM_getValueÔºâ
    function getAllBookLists() {
        try {
            // Â∞ùËØïËé∑Âèñ GM Â≠òÂÇ®ÁöÑÊï∞ÊçÆ
            const bookLists = GM_getValue(BOOK_LIST_STORAGE_KEY, {
                "ÊàëÁöÑ‰π¶Âçï": {
                    "‰π¶Á±ç": [],
                    "ÈªòËÆ§Áä∂ÊÄÅ": true
                }
            });

            return bookLists;
        } catch (error) {
            console.error('Ëé∑Âèñ‰π¶ÂçïÂ§±Ë¥•:', error);
            return {
                "ÊàëÁöÑ‰π¶Âçï": {
                    "‰π¶Á±ç": [],
                    "ÈªòËÆ§Áä∂ÊÄÅ": true
                }
            };
        }
    }

    // Ëé∑ÂèñÂΩìÂâç‰π¶ÂçïÁöÑ‰π¶Á±çÂàóË°®
    function getCurrentBookList() {
        const allBookLists = getAllBookLists();
        return allBookLists[currentBookListName] ? allBookLists[currentBookListName].‰π¶Á±ç : [];
    }

    // ‰øùÂ≠òÊâÄÊúâ‰π¶ÂçïÊï∞ÊçÆ
    function saveAllBookLists(bookLists) {
        try {
            GM_setValue(BOOK_LIST_STORAGE_KEY, bookLists);
        } catch (error) {
            console.error('‰øùÂ≠ò‰π¶ÂçïÂ§±Ë¥•:', error);
        }
    }

    // Ê£ÄÊü•ÂΩìÂâç‰π¶Á±çÊòØÂê¶Âú®ÂΩìÂâç‰π¶Âçï‰∏≠
    function isBookInCurrentList() {
        const bookList = getCurrentBookList();
        return bookList.some(book => book.url === window.location.href);
    }

    // Ê£ÄÊü•‰π¶Á±çÊòØÂê¶Â∑≤Â≠òÂú®ÔºàÊ†πÊçÆURLÔºâ
    function isBookAlreadyExists(bookList, bookUrl) {
        return bookList.some(book => book.url === bookUrl);
    }

    // ‰øùÂ≠òÂà∞ÂΩìÂâç‰π¶ÂçïÔºà‰ºòÂåñÂéªÈáçÈÄªËæëÔºâ
    function saveToCurrentBookList(bookInfo) {
        try {
            const allBookLists = getAllBookLists();
            const currentList = allBookLists[currentBookListName] || { "‰π¶Á±ç": [], "ÈªòËÆ§Áä∂ÊÄÅ": false };
            
            // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÂ≠òÂú®Áõ∏ÂêåÁöÑ‰π¶Á±ç
            const existingIndex = currentList.‰π¶Á±ç.findIndex(book => book.url === bookInfo.url);
            
            if (existingIndex !== -1) {
                // Â¶ÇÊûúÂ∑≤Â≠òÂú®ÔºåÂÖàÂà†Èô§ÊóßÁöÑÔºåÁÑ∂ÂêéÊ∑ªÂä†Âà∞ÈòüÈ¶ñ
                currentList.‰π¶Á±ç.splice(existingIndex, 1);
                currentList.‰π¶Á±ç.unshift(bookInfo);
                allBookLists[currentBookListName] = currentList;
                saveAllBookLists(allBookLists);
                return { success: true, message: '‰π¶Á±ç‰ø°ÊÅØÂ∑≤Êõ¥Êñ∞Âà∞‰π¶ÂçïÔºÅ', isUpdate: true };
            } else {
                // Â¶ÇÊûú‰∏çÂ≠òÂú®ÔºåÊ∑ªÂä†Âà∞ÈòüÈ¶ñ
                currentList.‰π¶Á±ç.unshift(bookInfo);
                allBookLists[currentBookListName] = currentList;
                saveAllBookLists(allBookLists);
                return { success: true, message: '‰π¶Á±çÂ∑≤Ê∑ªÂä†Âà∞‰π¶ÂçïÔºÅ', isUpdate: false };
            }
            
        } catch (error) {
            console.error('‰øùÂ≠òÂà∞‰π¶ÂçïÂ§±Ë¥•:', error);
            return { success: false, message: '‰øùÂ≠òÂ§±Ë¥•ÔºåËØ∑ÈáçËØïÔºÅ' };
        }
    }

    // ÂØºÂá∫ÂΩìÂâç‰π¶Âçï‰∏∫JSONÊñá‰ª∂ÔºàÂ¢ûÂä†Êõ¥Â§öÂØºÂá∫‰ø°ÊÅØÔºâ
    function exportCurrentBookList() {
        try {
            const bookList = getCurrentBookList();
            
            if (bookList.length === 0) {
                createNotification('ÂΩìÂâç‰π¶Âçï‰∏∫Á©∫ÔºåÊ≤°ÊúâÂèØÂØºÂá∫ÁöÑÂÜÖÂÆπÔºÅ', 'warning');
                return;
            }
            
            // ËΩ¨Êç¢‰∏∫ÂØºÂá∫Ê†ºÂºèÔºåÂ¢ûÂä†Êõ¥Â§öÂÖÉÊï∞ÊçÆ
            const exportData = {
                listName: currentBookListName,
                exportTime: new Date().toISOString(),
                books: bookList.map(book => ({
                    name: book.title,
                    author: book.author,
                    intro: book.summary,
                    url: book.url,
                    addTime: book.addTime
                }))
            };
            
            // ÂàõÂª∫JSONÂ≠óÁ¨¶‰∏≤
            const jsonString = JSON.stringify(exportData, null, 2);
            
            // ÂàõÂª∫‰∏ãËΩΩÈìæÊé•
            const blob = new Blob([jsonString], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${currentBookListName}_${new Date().toLocaleDateString('zh-CN').replace(/\//g, '-')}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            createNotification(`ÊàêÂäüÂØºÂá∫ ${bookList.length} Êú¨‰π¶Á±çÂà∞Êú¨Âú∞ÔºÅ\n\nÊé•‰∏ãÊù•ËØ∑ËøêË°åPython‰∏ä‰º†Â∑•ÂÖ∑Êù•Ëé∑ÂèñÁõ¥Èìæ„ÄÇ`, 'success', 5000);
        } catch (error) {
            console.error('ÂØºÂá∫Â§±Ë¥•:', error);
            createNotification('ÂØºÂá∫Â§±Ë¥•ÔºåËØ∑ÈáçËØïÔºÅ', 'error');
        }
    }

    // ÂàõÂª∫‰π¶ÂçïÊÇ¨ÊµÆÊ°Ü
    function createBookListPopup() {
        const popup = document.createElement('div');
        popup.id = 'booklist-popup';
        popup.style.cssText = `
            position: fixed;
            top: 70px;
            right: 20px;
            width: 350px;
            max-height: 500px;
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 10000;
            overflow: hidden;
            display: none;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        `;

        const header = document.createElement('div');
        header.style.cssText = `
            background: #007bff;
            color: white;
            padding: 12px 16px;
            font-weight: bold;
            font-size: 16px;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
            align-items: center;
        `;
        
        const title = document.createElement('span');
        title.textContent = `üìö ${currentBookListName}`;
        
        const exportButton = document.createElement('button');
        exportButton.innerHTML = 'üì§ ÂØºÂá∫';
        exportButton.style.cssText = `
            background: rgba(255,255,255,0.2);
            color: white;
            border: 1px solid rgba(255,255,255,0.3);
            padding: 4px 8px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s;
        `;
        
        exportButton.addEventListener('mouseenter', () => {
            exportButton.style.background = 'rgba(255,255,255,0.3)';
        });
        
        exportButton.addEventListener('mouseleave', () => {
            exportButton.style.background = 'rgba(255,255,255,0.2)';
        });
        
        exportButton.addEventListener('click', (e) => {
            e.stopPropagation();
            exportCurrentBookList();
        });
        
        header.appendChild(title);
        header.appendChild(exportButton);

        const content = document.createElement('div');
        content.style.cssText = `
            max-height: 400px;
            overflow-y: auto;
            padding: 0;
        `;

        popup.appendChild(header);
        popup.appendChild(content);
        document.body.appendChild(popup);

        return { popup, content, title };
    }

    // Êõ¥Êñ∞‰π¶ÂçïÊòæÁ§∫
    function updateBookListDisplay(content, titleElement) {
        const bookList = getCurrentBookList();
        
        // Ë∞ÉËØï‰ø°ÊÅØ
        console.log('Êõ¥Êñ∞‰π¶ÂçïÊòæÁ§∫Ôºå‰π¶Á±çÊï∞Èáè:', bookList.length);
        console.log('‰π¶ÂçïÂÜÖÂÆπ:', bookList);
        
        // Êõ¥Êñ∞Ê†áÈ¢òÊòæÁ§∫‰π¶Á±çÊï∞Èáè
        if (titleElement) {
            titleElement.textContent = `üìö ${currentBookListName} (${bookList.length})`;
        }
        
        if (bookList.length === 0) {
            content.innerHTML = `
                <div style="padding: 20px; text-align: center; color: #666;">
                    üìñ ‰π¶Âçï‰∏∫Á©∫ÔºåÂø´ÂéªÊ∑ªÂä†ÂñúÊ¨¢ÁöÑ‰π¶Á±çÂêßÔºÅ
                </div>
            `;
            return;
        }

        const bookItems = bookList.map((book, index) => {
            const coverHtml = book.cover ? 
                `<img src="${book.cover}" alt="Â∞ÅÈù¢" style="width: 50px; height: 70px; object-fit: cover; border-radius: 4px;">` :
                `<div style="width: 50px; height: 70px; background: #f0f0f0; display: flex; align-items: center; justify-content: center; border-radius: 4px; color: #999; font-size: 12px;">üìÑ</div>`;
            
            const addDate = new Date(book.addTime).toLocaleDateString('zh-CN');
            const isCurrentBook = book.url === window.location.href;
            
            return `
                <div style="display: flex; padding: 12px; border-bottom: 1px solid #f0f0f0; cursor: pointer; ${isCurrentBook ? 'background: #e3f2fd;' : ''}" 
                     onmouseover="this.style.background='${isCurrentBook ? '#bbdefb' : '#f8f9fa'}'" 
                     onmouseout="this.style.background='${isCurrentBook ? '#e3f2fd' : 'white'}'"
                     onclick="window.open('${book.url}', '_blank')">
                    <div style="margin-right: 12px;">
                        ${coverHtml}
                    </div>
                    <div style="flex: 1; min-width: 0;">
                        <div style="font-weight: bold; font-size: 14px; color: #333; margin-bottom: 4px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" title="${book.title}">
                            ${isCurrentBook ? 'üìç ' : ''}${book.title}
                        </div>
                        <div style="font-size: 12px; color: #666; margin-bottom: 4px;">
                            üë§ ‰ΩúËÄÖÔºö${book.author}
                        </div>
                        <div style="font-size: 11px; color: #999;">
                            üìÖ Ê∑ªÂä†Êó∂Èó¥Ôºö${addDate}
                        </div>
                    </div>
                    <div style="margin-left: 8px;">
                        <button onclick="event.stopPropagation(); removeFromCurrentBookList('${book.url}')" 
                                style="background: #f8f9fa; color: #6c757d; border: 1px solid #dee2e6; padding: 4px 8px; border-radius: 3px; font-size: 11px; cursor: pointer; transition: all 0.2s;"
                                onmouseover="this.style.background='#e9ecef'; this.style.color='#495057';"
                                onmouseout="this.style.background='#f8f9fa'; this.style.color='#6c757d';">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>
            `;
        }).join('');

        content.innerHTML = bookItems;
    }

    // Âà†Èô§‰π¶Á±çÔºàÂ¢ûÂä†Ë∑®ÁΩëÁ´ôÂÖºÂÆπÊÄßÔºâ
    window.removeFromCurrentBookList = function(url) {
        if (confirm('Á°ÆÂÆöË¶ÅÂà†Èô§ËøôÊú¨‰π¶ÂêóÔºü')) {
            try {
                const allBookLists = getAllBookLists();
                const currentList = allBookLists[currentBookListName];
                if (currentList) {
                    currentList.‰π¶Á±ç = currentList.‰π¶Á±ç.filter(book => book.url !== url);
                    saveAllBookLists(allBookLists);
                    
                    // Êõ¥Êñ∞ÊòæÁ§∫
                    const popup = document.getElementById('booklist-popup');
                    if (popup) {
                        const content = popup.querySelector('div:last-child');
                        const titleElement = popup.querySelector('div:first-child span');
                        updateBookListDisplay(content, titleElement);
                    }
                    
                    // Â¶ÇÊûúÂà†Èô§ÁöÑÊòØÂΩìÂâç‰π¶Á±çÔºåÊõ¥Êñ∞Ê∑ªÂä†ÊåâÈíÆÁä∂ÊÄÅ
                    if (url === window.location.href) {
                        updateAddButtonState();
                    }
                    
                    createNotification('Âà†Èô§ÊàêÂäüÔºÅ', 'success');
                }
            } catch (error) {
                console.error('Âà†Èô§Â§±Ë¥•:', error);
                createNotification('Âà†Èô§Â§±Ë¥•ÔºåËØ∑ÈáçËØïÔºÅ', 'error');
            }
        }
    };

    // Êõ¥Êñ∞Ê∑ªÂä†ÊåâÈíÆÁä∂ÊÄÅ
    function updateAddButtonState() {
        const addButton = document.getElementById('add-book-button');
        if (addButton) {
            const isInList = isBookInCurrentList();
            if (isInList) {
                addButton.innerHTML = '‚úÖ Â∑≤Ê∑ªÂä†';
                addButton.style.background = '#28a745';
                addButton.disabled = true;
            } else {
                addButton.innerHTML = 'üìñ Ê∑ªÂä†Âà∞‰π¶Âçï';
                addButton.style.background = '#007bff';
                addButton.disabled = false;
            }
        }
    }

    // ÂàõÂª∫Ê∑ªÂä†‰π¶Á±çÊåâÈíÆ
    function createAddBookButton() {
        const button = document.createElement('button');
        button.id = 'add-book-button';
        button.innerHTML = 'üìñ Ê∑ªÂä†Âà∞‰π¶Âçï'; // ËÆæÁΩÆÂàùÂßãÊñáÂ≠ó
        button.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: all 0.3s;
            min-width: 120px;
            text-align: center;
        `;
        
        // ÂàùÂßãÂåñÊåâÈíÆÁä∂ÊÄÅ
        setTimeout(() => {
            updateAddButtonState();
        }, 100);
        
        button.addEventListener('mouseenter', () => {
            if (!button.disabled) {
                button.style.background = '#0056b3';
            }
        });
        
        button.addEventListener('mouseleave', () => {
            if (!button.disabled) {
                button.style.background = '#007bff';
            }
        });
        
        button.addEventListener('click', async () => {
            if (button.disabled) return;
            
            button.disabled = true;
            button.innerHTML = '‚è≥ Â§ÑÁêÜ‰∏≠...';
            
            try {
                // Âä®ÊÄÅËé∑ÂèñÂΩìÂâçÁΩëÁ´ôÁöÑÈÄâÊã©Âô®
                const siteConfig = await loadSiteConfig();
                
                // Á≠âÂæÖÈ°µÈù¢ÂÖÉÁ¥†Âä†ËΩΩÂÆåÊàêÔºåÊîØÊåÅÂ§öÈÄâÊã©Âô®
                const selectorsToWait = siteConfig ? Object.values(siteConfig.selectors) : [
                    '.title-box > h3', 
                    'h1.book-name',
                    '.row > a', 
                    'span.text-red-500',
                    '.book-summary', 
                    'div.el-collapse-item__content > div',
                    '.left > img', 
                    'header > img'
                ];
                
                await waitForElement(selectorsToWait);
                
                // ÊèêÂèñ‰π¶Á±ç‰ø°ÊÅØ
                const bookInfo = await extractBookInfo();
                
                if (bookInfo) {
                    // ‰øùÂ≠òÂà∞ÂΩìÂâç‰π¶Âçï
                    const result = saveToCurrentBookList(bookInfo);
                    if (result.success) {
                        button.innerHTML = result.isUpdate ? 'üîÑ Â∑≤Êõ¥Êñ∞' : '‚úÖ Â∑≤Ê∑ªÂä†';
                        button.style.background = '#28a745';
                        
                        // ‰ΩøÁî®‰ºòÁæéÊèêÁ§∫
                        createNotification(result.message, 'success');
                        
                        // Ë∞ÉËØï‰ø°ÊÅØ
                        console.log('‰π¶Á±çÊ∑ªÂä†ÊàêÂäü:', bookInfo.title);
                        console.log('ÂΩìÂâç‰π¶ÂçïÊï∞Èáè:', getCurrentBookList().length);
                        
                        setTimeout(() => {
                            updateAddButtonState();
                        }, 2000);
                    } else {
                        button.innerHTML = '‚ùå Ê∑ªÂä†Â§±Ë¥•';
                        button.style.background = '#dc3545';
                        createNotification(result.message, 'error');
                        setTimeout(() => {
                            updateAddButtonState();
                        }, 2000);
                    }
                } else {
                    button.innerHTML = '‚ùå Ëé∑Âèñ‰ø°ÊÅØÂ§±Ë¥•';
                    button.style.background = '#dc3545';
                    createNotification('Ëé∑Âèñ‰π¶Á±ç‰ø°ÊÅØÂ§±Ë¥•ÔºåËØ∑ÈáçËØïÔºÅ', 'error');
                    setTimeout(() => {
                        updateAddButtonState();
                    }, 2000);
                }
            } catch (error) {
                console.error('Ê∑ªÂä†Âà∞‰π¶ÂçïÂ§±Ë¥•:', error);
                button.innerHTML = '‚è∞ È°µÈù¢Êú™Âä†ËΩΩÂÆåÊàê';
                button.style.background = '#ffc107';
                createNotification('È°µÈù¢Êú™Âä†ËΩΩÂÆåÊàêÔºåËØ∑Á®çÂêéÈáçËØïÔºÅ', 'warning');
                setTimeout(() => {
                    updateAddButtonState();
                }, 2000);
            }
        });
        
        return button;
    }

    // ÂàõÂª∫‰π¶ÂçïËÆæÁΩÆÊåâÈíÆÔºàÊï¥ÂêàÊâÄÊúâ‰π¶ÂçïÂäüËÉΩÔºâ
    function createBookListSettingsButton() {
        const button = document.createElement('button');
        button.innerHTML = '‚öôÔ∏è ‰π¶ÂçïËÆæÁΩÆ';
        button.style.cssText = `
            position: fixed;
            top: 20px;
            right: 140px;
            z-index: 9999;
            background: #6c757d;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: all 0.3s;
            min-width: 120px;
            text-align: center;
        `;
        
        // ÂàõÂª∫ÊÇ¨ÊµÆÊ°Ü
        const { popup, content, title } = createBookListPopup();
        
        // Èº†Ê†áÊÇ¨ÊµÆÊòæÁ§∫‰π¶Âçï
        button.addEventListener('mouseenter', () => {
            button.style.background = '#5a6268';
            popup.style.display = 'block';
            // Á°Æ‰øù‰π¶ÂçïÂÜÖÂÆπÊòØÊúÄÊñ∞ÁöÑ
            setTimeout(() => {
                updateBookListDisplay(content, title);
            }, 50);
        });
        
        // Èº†Ê†áÁ¶ªÂºÄÈöêËóè‰π¶Âçï
        button.addEventListener('mouseleave', () => {
            button.style.background = '#6c757d';
            // Âª∂ËøüÈöêËóèÔºåÁªôÁî®Êà∑Êó∂Èó¥ÁßªÂä®Âà∞ÊÇ¨ÊµÆÊ°Ü
            setTimeout(() => {
                if (!popup.matches(':hover')) {
                    popup.style.display = 'none';
                }
            }, 200);
        });
        
        // ÊÇ¨ÊµÆÊ°ÜÈº†Ê†áÁ¶ªÂºÄÊó∂ÈöêËóè
        popup.addEventListener('mouseleave', () => {
            popup.style.display = 'none';
        });
        
        // ÁÇπÂáªÊåâÈíÆÊâìÂºÄ‰π¶ÂçïÁÆ°ÁêÜÈù¢Êùø
        button.addEventListener('click', () => {
            openBookListManager();
        });
        
        return button;
    }

    // ÂàáÊç¢‰π¶Âçï
    function switchBookList(name) {
        currentBookListName = name;
        
        // Êõ¥Êñ∞Ê∑ªÂä†ÊåâÈíÆÁä∂ÊÄÅ
        updateAddButtonState();
        
        // Êõ¥Êñ∞‰π¶ÂçïÊòæÁ§∫
        const popup = document.getElementById('booklist-popup');
        if (popup) {
            const content = popup.querySelector('div:last-child');
            const titleElement = popup.querySelector('div:first-child span');
            updateBookListDisplay(content, titleElement);
        }
        
        createNotification(`Â∑≤ÂàáÊç¢Âà∞‰π¶ÂçïÔºö${currentBookListName}`, 'info');
        console.log('ÂàáÊç¢Âà∞‰π¶Âçï:', currentBookListName);
    }

    // ÂàõÂª∫Êñ∞‰π¶Âçï
    function createNewBookList(name) {
        const allBookLists = getAllBookLists();
        
        if (allBookLists[name]) {
            createNotification('‰π¶ÂçïÂêçÁß∞Â∑≤Â≠òÂú®ÔºåËØ∑‰ΩøÁî®ÂÖ∂‰ªñÂêçÁß∞ÔºÅ', 'warning');
            return;
        }
        
        allBookLists[name] = {
            "‰π¶Á±ç": [],
            "ÈªòËÆ§Áä∂ÊÄÅ": false
        };
        
        saveAllBookLists(allBookLists);
        switchBookList(name);
        
        createNotification(`‰π¶Âçï"${name}"ÂàõÂª∫ÊàêÂäüÔºÅ`, 'success');
    }

    // ÊâìÂºÄ‰π¶ÂçïÁÆ°ÁêÜÈù¢Êùø
    window.openBookListManager = function() {
        const allBookLists = getAllBookLists();
        const bookListNames = Object.keys(allBookLists);
        
        let managerHtml = `
            <div style="padding: 20px; background: white; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); max-width: 500px; margin: 50px auto;">
                <h3 style="margin-top: 0; color: #333;">üìö ‰π¶ÂçïÁÆ°ÁêÜ</h3>
                <div style="max-height: 300px; overflow-y: auto; margin-bottom: 20px;">
        `;
        
        bookListNames.forEach(name => {
            const bookCount = allBookLists[name].‰π¶Á±ç.length;
            const isDefault = allBookLists[name].ÈªòËÆ§Áä∂ÊÄÅ;
            const isCurrent = name === currentBookListName;
            
            managerHtml += `
                <div style="display: flex; justify-content: space-between; align-items: center; padding: 10px; border-bottom: 1px solid #f0f0f0; ${isCurrent ? 'background: #e3f2fd;' : ''}">
                    <div>
                        <strong>${name}</strong> 
                        <span style="color: #666; font-size: 12px;">‰π¶Á±ç: ${bookCount}</span>
                        ${isDefault ? '<span style="color: #28a745; font-size: 12px;">(ÈªòËÆ§)</span>' : ''}
                        ${isCurrent ? '<span style="color: #007bff; font-size: 12px;">(ÂΩìÂâç)</span>' : ''}
                    </div>
                    <div>
                        <button onclick="switchToBookList('${name}')" style="background: #007bff; color: white; border: none; padding: 4px 8px; border-radius: 3px; margin-right: 5px; cursor: pointer; font-size: 12px;">ÂàáÊç¢</button>
                        <button onclick="renameBookList('${name}')" style="background: #ffc107; color: white; border: none; padding: 4px 8px; border-radius: 3px; margin-right: 5px; cursor: pointer; font-size: 12px;">ÈáçÂëΩÂêç</button>
                        <button onclick="deleteBookList('${name}')" style="background: #dc3545; color: white; border: none; padding: 4px 8px; border-radius: 3px; cursor: pointer; font-size: 12px;">Âà†Èô§</button>
                    </div>
                </div>
            `;
        });
        
        managerHtml += `
                </div>
                <div style="text-align: center;">
                    <button onclick="createNewBookListFromManager()" style="background: #28a745; color: white; border: none; padding: 8px 16px; border-radius: 5px; margin-right: 10px; cursor: pointer;">Êñ∞Âª∫‰π¶Âçï</button>
                    <button onclick="closeBookListManager()" style="background: #6c757d; color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer;">ÂÖ≥Èó≠</button>
                </div>
            </div>
        `;
        
        // ÂàõÂª∫Ê®°ÊÄÅÊ°Ü
        const modal = document.createElement('div');
        modal.id = 'booklist-manager-modal';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 10002;
            display: flex;
            align-items: center;
            justify-content: center;
        `;
        
        modal.innerHTML = managerHtml;
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeBookListManager();
            }
        });
        
        document.body.appendChild(modal);
    };

    // ÂÖ≥Èó≠‰π¶ÂçïÁÆ°ÁêÜÈù¢Êùø
    window.closeBookListManager = function() {
        const modal = document.getElementById('booklist-manager-modal');
        if (modal) {
            modal.remove();
        }
    };

    // ÂàáÊç¢Âà∞ÊåáÂÆö‰π¶Âçï
    window.switchToBookList = function(name) {
        switchBookList(name);
        closeBookListManager();
    };

    // ÈáçÂëΩÂêç‰π¶Âçï
    window.renameBookList = function(oldName) {
        const newName = prompt(`ËØ∑ËæìÂÖ•"${oldName}"ÁöÑÊñ∞ÂêçÁß∞Ôºö`);
        if (newName && newName.trim() && newName.trim() !== oldName) {
            const allBookLists = getAllBookLists();
            
            if (allBookLists[newName.trim()]) {
                createNotification('‰π¶ÂçïÂêçÁß∞Â∑≤Â≠òÂú®ÔºåËØ∑‰ΩøÁî®ÂÖ∂‰ªñÂêçÁß∞ÔºÅ', 'warning');
                return;
            }
            
            allBookLists[newName.trim()] = allBookLists[oldName];
            delete allBookLists[oldName];
            saveAllBookLists(allBookLists);
            
            if (currentBookListName === oldName) {
                currentBookListName = newName.trim();
            }
            
            closeBookListManager();
            createNotification('ÈáçÂëΩÂêçÊàêÂäüÔºÅ', 'success');
        }
    };

    // Âà†Èô§‰π¶Âçï
    window.deleteBookList = function(name) {
        const allBookLists = getAllBookLists();
        const bookCount = allBookLists[name].‰π¶Á±ç.length;
        
        let confirmMessage = `Á°ÆÂÆöË¶ÅÂà†Èô§‰π¶Âçï"${name}"ÂêóÔºü`;
        if (bookCount > 0) {
            confirmMessage = `Á°ÆÂÆöË¶ÅÂà†Èô§‰π¶Âçï"${name}"ÂêóÔºü\n\nËØ•‰π¶ÂçïÂåÖÂê´ ${bookCount} Êú¨‰π¶Á±çÔºåÂà†Èô§ÂêéÂ∞ÜÊó†Ê≥ïÊÅ¢Â§çÔºÅ`;
        }
        
        if (confirm(confirmMessage)) {
            delete allBookLists[name];
            saveAllBookLists(allBookLists);
            
            if (currentBookListName === name) {
                // Â¶ÇÊûúÂà†Èô§ÁöÑÊòØÂΩìÂâç‰π¶ÂçïÔºåÂàáÊç¢Âà∞Á¨¨‰∏Ä‰∏™ÂèØÁî®‰π¶Âçï
                const remainingNames = Object.keys(allBookLists);
                if (remainingNames.length > 0) {
                    switchBookList(remainingNames[0]);
                } else {
                    // Â¶ÇÊûúÊ≤°Êúâ‰π¶Âçï‰∫ÜÔºåÂàõÂª∫ÈªòËÆ§‰π¶Âçï
                    createNewBookList('ÊàëÁöÑ‰π¶Âçï');
                }
            }
            
            closeBookListManager();
            createNotification('Âà†Èô§ÊàêÂäüÔºÅ', 'success');
        }
    };

    // ‰ªéÁÆ°ÁêÜÈù¢ÊùøÊñ∞Âª∫‰π¶Âçï
    window.createNewBookListFromManager = function() {
        closeBookListManager();
        const bookListName = prompt('ËØ∑ËæìÂÖ•Êñ∞‰π¶ÂçïÂêçÁß∞Ôºö');
        if (bookListName && bookListName.trim()) {
            createNewBookList(bookListName.trim());
        }
    };

    // Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩÂÆåÊàêÔºåÊîØÊåÅÂ§öÈÄâÊã©Âô®
    function waitForElement(selectors, timeout = 5000) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            
            const checkElements = () => {
                // ÊîØÊåÅÂ§öÈÄâÊã©Âô®
                const selectorsArray = Array.isArray(selectors) ? selectors : [selectors];
                
                for (const selector of selectorsArray) {
                    const element = document.querySelector(selector);
                    if (element) {
                        resolve(element);
                        return;
                    }
                }
                
                if (Date.now() - startTime > timeout) {
                    reject(new Error(`Á≠âÂæÖÂÖÉÁ¥† ${selectors} Ë∂ÖÊó∂`));
                    return;
                }
                
                setTimeout(checkElements, 100);
            };
            
            checkElements();
        });
    }

    // ÁºìÂ≠òÁΩëÁ´ôÈÖçÁΩÆ
    async function loadSiteConfig() {
        try {
            const host = window.location.host;
            const sourceListUrl = 'https://raw.githubusercontent.com/zeroyong/js/main/sourceBooks/source.json';
            
            // Â∞ùËØïËé∑ÂèñÁºìÂ≠òÁöÑÈÖçÁΩÆ
            const cachedConfigs = GM_getValue(SITE_CONFIG_CACHE_KEY, {});
            
            // Ëé∑ÂèñÊ∫êÁ´ôÁÇπÂàóË°®
            const sourceList = await fetch(sourceListUrl).then(res => res.json());
            const matchedSource = sourceList.find(source => host.includes(source.match));
            
            if (!matchedSource) {
                console.warn('Êú™ÊâæÂà∞ÂåπÈÖçÁöÑÁΩëÁ´ôÈÖçÁΩÆ');
                return null;
            }

            // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊõ¥Êñ∞ÁºìÂ≠ò
            const cachedConfig = cachedConfigs[matchedSource.match];
            if (cachedConfig && cachedConfig.version === matchedSource.version) {
                console.log('‰ΩøÁî®ÁºìÂ≠òÁöÑÁΩëÁ´ôÈÖçÁΩÆ');
                return cachedConfig.config;
            }

            // Âä†ËΩΩÊúÄÊñ∞ÈÖçÁΩÆ
            const configUrl = `https://raw.githubusercontent.com/zeroyong/js/main/sourceBooks/${matchedSource.config}`;
            const config = await fetch(configUrl).then(res => res.json());

            // Êõ¥Êñ∞ÁºìÂ≠ò
            cachedConfigs[matchedSource.match] = {
                version: matchedSource.version,
                config: config,
                timestamp: Date.now()
            };
            GM_setValue(SITE_CONFIG_CACHE_KEY, cachedConfigs);

            console.log('Âä†ËΩΩÂπ∂ÁºìÂ≠òÊñ∞ÁöÑÁΩëÁ´ôÈÖçÁΩÆ');
            return config;
        } catch (error) {
            console.error('Âä†ËΩΩÁΩëÁ´ôÈÖçÁΩÆÂ§±Ë¥•:', error);
            return null;
        }
    }

    // ‰ΩøÁî®ÈÖçÁΩÆÊñá‰ª∂ÊèêÂèñ‰π¶Á±ç‰ø°ÊÅØ
    async function extractBookInfoByConfig(config) {
        if (!config || !config.selectors) {
            console.error('Êó†ÊïàÁöÑÈÖçÁΩÆÊñá‰ª∂');
            return null;
        }

        try {
            const extractedInfo = {};
            const extractors = config.extractors || {};

            console.log('ÂΩìÂâçÁΩëÁ´ôÈÖçÁΩÆ:', config);

            for (const [key, selector] of Object.entries(config.selectors)) {
                const element = document.querySelector(selector);
                
                console.log(`Êü•Êâæ ${key} ÂÖÉÁ¥†:`, {
                    selector: selector,
                    element: element
                });

                if (!element) {
                    console.warn(`Êú™ÊâæÂà∞ ${key} ÈÄâÊã©Âô®: ${selector}`);
                    extractedInfo[key] = '';
                    continue;
                }

                const extractMethod = extractors[key] || 'textContent';
                extractedInfo[key] = element[extractMethod]?.trim() || '';
                
                console.log(`ÊèêÂèñ ${key}:`, extractedInfo[key]);
            }

            return {
                title: extractedInfo.title,
                author: extractedInfo.author,
                summary: extractedInfo.summary,
                cover: extractedInfo.cover,
                url: window.location.href,
                addTime: new Date().toISOString()
            };
        } catch (error) {
            console.error('ÊèêÂèñ‰π¶Á±ç‰ø°ÊÅØÂ§±Ë¥•:', error);
            return null;
        }
    }

    // ‰øÆÊîπÂéüÊúâÁöÑ extractBookInfo ÂáΩÊï∞
    async function extractBookInfo() {
        const siteConfig = await loadSiteConfig();
        
        console.log('Ëé∑ÂèñÂà∞ÁöÑÁ´ôÁÇπÈÖçÁΩÆ:', siteConfig);
        
        if (siteConfig) {
            return await extractBookInfoByConfig(siteConfig);
        }

        // Â¶ÇÊûúÊ≤°ÊúâÈÖçÁΩÆÊñá‰ª∂Ôºå‰ΩøÁî®ÂéüÊúâÁöÑÁ°¨ÁºñÁ†ÅÊèêÂèñÊñπÊ≥ï
        try {
            console.warn('‰ΩøÁî®ÈªòËÆ§ÊèêÂèñÊñπÊ≥ï');
            
            const titleElement = document.querySelector('.title-box > h3, h1.book-name');
            const title = titleElement ? titleElement.textContent.trim() : 'Êú™Áü•‰π¶Âêç';
            
            const authorElement = document.querySelector('.row > a, span.text-red-500');
            const author = authorElement ? authorElement.textContent.trim() : 'Êú™Áü•‰ΩúËÄÖ';
            
            const summaryElement = document.querySelector('.book-summary, div.el-collapse-item__content > div');
            const summary = summaryElement ? summaryElement.textContent.trim() : 'ÊöÇÊó†ÁÆÄ‰ªã';
            
            const coverElement = document.querySelector('.left > img, header > img');
            const cover = coverElement ? coverElement.src : '';
            
            return {
                title: title,
                author: author,
                summary: summary,
                cover: cover,
                url: window.location.href,
                addTime: new Date().toISOString()
            };
        } catch (error) {
            console.error('ÊèêÂèñ‰π¶Á±ç‰ø°ÊÅØÂ§±Ë¥•:', error);
            return null;
        }
    }

    // Ê∏ÖÁêÜËøáÊúüÁöÑÈÖçÁΩÆÁºìÂ≠òÔºàÂèØÈÄâÔºâ
    function cleanConfigCache() {
        try {
            const cachedConfigs = GM_getValue(SITE_CONFIG_CACHE_KEY, {});
            const currentTime = Date.now();
            
            // Âà†Èô§Ë∂ÖËøá30Â§©ÁöÑÁºìÂ≠ò
            Object.keys(cachedConfigs).forEach(key => {
                if (currentTime - (cachedConfigs[key].timestamp || 0) > 30 * 24 * 60 * 60 * 1000) {
                    delete cachedConfigs[key];
                }
            });

            GM_setValue(SITE_CONFIG_CACHE_KEY, cachedConfigs);
        } catch (error) {
            console.error('Ê∏ÖÁêÜÈÖçÁΩÆÁºìÂ≠òÂ§±Ë¥•:', error);
        }
    }

    // Âú®ËÑöÊú¨ÂàùÂßãÂåñÊó∂Ê∏ÖÁêÜÁºìÂ≠ò
    cleanConfigCache();

    // ‰∏ªÂáΩÊï∞
    function init() {
        // Á≠âÂæÖÈ°µÈù¢Âü∫Êú¨ÁªìÊûÑÂä†ËΩΩÂÆåÊàê
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                setTimeout(() => {
                    const addButton = createAddBookButton();
                    const settingsButton = createBookListSettingsButton();
                    
                    document.body.appendChild(addButton);
                    document.body.appendChild(settingsButton);
                }, 1000);
            });
        } else {
            setTimeout(() => {
                const addButton = createAddBookButton();
                const settingsButton = createBookListSettingsButton();
                
                document.body.appendChild(addButton);
                document.body.appendChild(settingsButton);
            }, 1000);
        }
    }

    // ÂêØÂä®ËÑöÊú¨
    init();
})();

